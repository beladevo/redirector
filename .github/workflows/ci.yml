name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  # test:
  #   name: Test Suite
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: ["3.9", "3.10", "3.11", "3.12"]

  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ matrix.python-version }}
        
  #   - name: Cache pip dependencies
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -e .[dev]
        
  #   - name: Lint with ruff
  #     run: ruff check src tests
      
  #   - name: Format check with black
  #     run: black --check src tests
      
  #   - name: Type check with mypy
  #     run: mypy src
      
  #   - name: Test with pytest
  #     run: |
  #       pytest --cov=src/redirector --cov-report=xml --cov-report=term
        
  #   - name: Upload coverage reports
  #     uses: codecov/codecov-action@v3
  #     if: matrix.python-version == '3.11'
  #     with:
  #       token: ${{ secrets.CODECOV_TOKEN }}
  #       file: ./coverage.xml

  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.11"
        
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install bandit[toml] safety
  #       pip install -e .
        
  #   - name: Run bandit security linter
  #     run: |
  #       bandit -r src/ -f json -o bandit-report.json || true
  #       bandit -r src/ 
        
  #   - name: Check for known security vulnerabilities
  #     run: safety check --json --output safety-report.json || true

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    # needs: [test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t redirector:test .
        
    - name: Test Docker image
      run: |
        # Test that the image starts correctly
        docker run --rm -d --name test-redirector \
          -p 8080:8080 -p 3000:3000 \
          redirector:test
        
        # Wait for container to be ready (max 60 seconds)
        for i in {1..12}; do
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "Container is ready!"
            break
          fi
          echo "Waiting for container... ($i/12)"
          sleep 5
        done
        
        # Final health check
        curl -f http://localhost:3000/health || {
          echo "Health check failed, showing container logs:"
          docker logs test-redirector
          exit 1
        }
        
        docker stop test-redirector

  build-and-publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    needs: [docker]
    # needs: [test, security, docker]
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package
      run: twine check dist/*
      
    - name: Publish to PyPI
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: twine upload dist/*
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.event_name == 'release' || github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/redirector
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max